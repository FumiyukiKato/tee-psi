// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#include "Messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttestationMessage_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitialMessage_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMSG1_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMSG2_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMSG3_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMsg0_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiHashData_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiHashDataFinished_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiIntersect_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiResult_Messages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiSalt_Messages_2eproto;
namespace Messages {
class JudgeContactRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JudgeContactRequest> _instance;
  const ::Messages::InitialMessage* initial_message_;
  const ::Messages::MessageMsg0* msg0_;
  const ::Messages::MessageMSG2* msg2_;
  const ::Messages::AttestationMessage* attestation_message_;
  const ::Messages::MessagePsiHashData* message_psi_hash_data_;
  const ::Messages::MessagePsiHashDataFinished* message_psi_hash_data_finished_;
} _JudgeContactRequest_default_instance_;
class JudgeContactResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JudgeContactResponse> _instance;
  const ::Messages::MessageMsg0* msg0_;
  const ::Messages::MessageMSG1* msg1_;
  const ::Messages::MessageMSG3* msg3_;
  const ::Messages::MessagePsiSalt* message_psi_salt_;
  const ::Messages::MessagePsiResult* message_psi_result_;
  const ::Messages::MessagePsiIntersect* message_psi_intersect_;
} _JudgeContactResponse_default_instance_;
class InitialMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialMessage> _instance;
} _InitialMessage_default_instance_;
class MessageMsg0DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMsg0> _instance;
} _MessageMsg0_default_instance_;
class MessageMSG1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMSG1> _instance;
} _MessageMSG1_default_instance_;
class MessageMSG2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMSG2> _instance;
} _MessageMSG2_default_instance_;
class MessageMSG3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMSG3> _instance;
} _MessageMSG3_default_instance_;
class AttestationMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttestationMessage> _instance;
} _AttestationMessage_default_instance_;
class MessagePsiSaltDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagePsiSalt> _instance;
} _MessagePsiSalt_default_instance_;
class MessagePsiHashDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagePsiHashData> _instance;
} _MessagePsiHashData_default_instance_;
class MessagePsiHashDataFinishedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagePsiHashDataFinished> _instance;
} _MessagePsiHashDataFinished_default_instance_;
class MessagePsiResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagePsiResult> _instance;
} _MessagePsiResult_default_instance_;
class MessagePsiIntersectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagePsiIntersect> _instance;
} _MessagePsiIntersect_default_instance_;
}  // namespace Messages
static void InitDefaultsscc_info_AttestationMessage_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_AttestationMessage_default_instance_;
    new (ptr) ::Messages::AttestationMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::AttestationMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttestationMessage_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttestationMessage_Messages_2eproto}, {}};

static void InitDefaultsscc_info_InitialMessage_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_InitialMessage_default_instance_;
    new (ptr) ::Messages::InitialMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::InitialMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitialMessage_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitialMessage_Messages_2eproto}, {}};

static void InitDefaultsscc_info_JudgeContactRequest_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_JudgeContactRequest_default_instance_;
    new (ptr) ::Messages::JudgeContactRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::JudgeContactRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_JudgeContactRequest_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_JudgeContactRequest_Messages_2eproto}, {
      &scc_info_InitialMessage_Messages_2eproto.base,
      &scc_info_MessageMsg0_Messages_2eproto.base,
      &scc_info_MessageMSG2_Messages_2eproto.base,
      &scc_info_AttestationMessage_Messages_2eproto.base,
      &scc_info_MessagePsiHashData_Messages_2eproto.base,
      &scc_info_MessagePsiHashDataFinished_Messages_2eproto.base,}};

static void InitDefaultsscc_info_JudgeContactResponse_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_JudgeContactResponse_default_instance_;
    new (ptr) ::Messages::JudgeContactResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::JudgeContactResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_JudgeContactResponse_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_JudgeContactResponse_Messages_2eproto}, {
      &scc_info_MessageMsg0_Messages_2eproto.base,
      &scc_info_MessageMSG1_Messages_2eproto.base,
      &scc_info_MessageMSG3_Messages_2eproto.base,
      &scc_info_MessagePsiSalt_Messages_2eproto.base,
      &scc_info_MessagePsiResult_Messages_2eproto.base,
      &scc_info_MessagePsiIntersect_Messages_2eproto.base,}};

static void InitDefaultsscc_info_MessageMSG1_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessageMSG1_default_instance_;
    new (ptr) ::Messages::MessageMSG1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessageMSG1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMSG1_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageMSG1_Messages_2eproto}, {}};

static void InitDefaultsscc_info_MessageMSG2_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessageMSG2_default_instance_;
    new (ptr) ::Messages::MessageMSG2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessageMSG2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMSG2_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageMSG2_Messages_2eproto}, {}};

static void InitDefaultsscc_info_MessageMSG3_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessageMSG3_default_instance_;
    new (ptr) ::Messages::MessageMSG3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessageMSG3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMSG3_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageMSG3_Messages_2eproto}, {}};

static void InitDefaultsscc_info_MessageMsg0_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessageMsg0_default_instance_;
    new (ptr) ::Messages::MessageMsg0();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessageMsg0::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMsg0_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageMsg0_Messages_2eproto}, {}};

static void InitDefaultsscc_info_MessagePsiHashData_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessagePsiHashData_default_instance_;
    new (ptr) ::Messages::MessagePsiHashData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessagePsiHashData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiHashData_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagePsiHashData_Messages_2eproto}, {}};

static void InitDefaultsscc_info_MessagePsiHashDataFinished_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessagePsiHashDataFinished_default_instance_;
    new (ptr) ::Messages::MessagePsiHashDataFinished();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessagePsiHashDataFinished::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiHashDataFinished_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagePsiHashDataFinished_Messages_2eproto}, {}};

static void InitDefaultsscc_info_MessagePsiIntersect_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessagePsiIntersect_default_instance_;
    new (ptr) ::Messages::MessagePsiIntersect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessagePsiIntersect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiIntersect_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagePsiIntersect_Messages_2eproto}, {}};

static void InitDefaultsscc_info_MessagePsiResult_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessagePsiResult_default_instance_;
    new (ptr) ::Messages::MessagePsiResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessagePsiResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiResult_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagePsiResult_Messages_2eproto}, {}};

static void InitDefaultsscc_info_MessagePsiSalt_Messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Messages::_MessagePsiSalt_default_instance_;
    new (ptr) ::Messages::MessagePsiSalt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Messages::MessagePsiSalt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePsiSalt_Messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagePsiSalt_Messages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Messages_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Messages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Messages::JudgeContactRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::JudgeContactRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Messages::JudgeContactRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Messages::JudgeContactRequestDefaultTypeInternal, initial_message_),
  offsetof(::Messages::JudgeContactRequestDefaultTypeInternal, msg0_),
  offsetof(::Messages::JudgeContactRequestDefaultTypeInternal, msg2_),
  offsetof(::Messages::JudgeContactRequestDefaultTypeInternal, attestation_message_),
  offsetof(::Messages::JudgeContactRequestDefaultTypeInternal, message_psi_hash_data_),
  offsetof(::Messages::JudgeContactRequestDefaultTypeInternal, message_psi_hash_data_finished_),
  PROTOBUF_FIELD_OFFSET(::Messages::JudgeContactRequest, action_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Messages::JudgeContactResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::JudgeContactResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Messages::JudgeContactResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::Messages::JudgeContactResponseDefaultTypeInternal, msg0_),
  offsetof(::Messages::JudgeContactResponseDefaultTypeInternal, msg1_),
  offsetof(::Messages::JudgeContactResponseDefaultTypeInternal, msg3_),
  offsetof(::Messages::JudgeContactResponseDefaultTypeInternal, message_psi_salt_),
  offsetof(::Messages::JudgeContactResponseDefaultTypeInternal, message_psi_result_),
  offsetof(::Messages::JudgeContactResponseDefaultTypeInternal, message_psi_intersect_),
  PROTOBUF_FIELD_OFFSET(::Messages::JudgeContactResponse, action_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Messages::InitialMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::InitialMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::InitialMessage, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::InitialMessage, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMsg0, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMsg0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMsg0, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMsg0, epid_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMsg0, status_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG1, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG1, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG1, gax_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG1, gay_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG1, gid_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, public_key_gx_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, public_key_gy_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, quote_type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, spid_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, cmac_kdf_id_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, signature_x_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, signature_y_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, smac_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, size_sigrl_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG2, sigrl_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
  ~0u,
  4,
  ~0u,
  ~0u,
  ~0u,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, sgx_mac_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, gax_msg3_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, gay_msg3_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, sec_property_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessageMSG3, quote_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, mode_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, epid_group_status_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, tcb_evaluation_status_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, pse_evaluation_status_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, latest_equivalent_tcb_psvn_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, latest_pse_isvsvn_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, latest_psda_svn_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, performance_rekey_gid_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, ec_sign256_x_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, ec_sign256_y_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, mac_smk_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, result_size_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, reserved_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, payload_tag_),
  PROTOBUF_FIELD_OFFSET(::Messages::AttestationMessage, payload_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, id_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, state_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, mac_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiSalt, salt_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, mode_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, id_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, mac_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashData, data_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashDataFinished, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashDataFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashDataFinished, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashDataFinished, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashDataFinished, mode_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashDataFinished, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiHashDataFinished, id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiResult, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiResult, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiResult, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiResult, id_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiResult, state_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiIntersect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiIntersect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiIntersect, type_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiIntersect, size_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiIntersect, context_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiIntersect, id_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiIntersect, mac_),
  PROTOBUF_FIELD_OFFSET(::Messages::MessagePsiIntersect, data_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::Messages::JudgeContactRequest)},
  { 18, 30, sizeof(::Messages::JudgeContactResponse)},
  { 36, 43, sizeof(::Messages::InitialMessage)},
  { 45, 53, sizeof(::Messages::MessageMsg0)},
  { 56, 66, sizeof(::Messages::MessageMSG1)},
  { 71, 89, sizeof(::Messages::MessageMSG2)},
  { 102, 115, sizeof(::Messages::MessageMSG3)},
  { 123, 146, sizeof(::Messages::AttestationMessage)},
  { 164, 176, sizeof(::Messages::MessagePsiSalt)},
  { 183, 195, sizeof(::Messages::MessagePsiHashData)},
  { 202, 212, sizeof(::Messages::MessagePsiHashDataFinished)},
  { 217, 227, sizeof(::Messages::MessagePsiResult)},
  { 232, 243, sizeof(::Messages::MessagePsiIntersect)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_JudgeContactRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_JudgeContactResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_InitialMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessageMsg0_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessageMSG1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessageMSG2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessageMSG3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_AttestationMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessagePsiSalt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessagePsiHashData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessagePsiHashDataFinished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessagePsiResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Messages::_MessagePsiIntersect_default_instance_),
};

const char descriptor_table_protodef_Messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Messages.proto\022\010Messages\"\356\002\n\023JudgeCont"
  "actRequest\0223\n\017initial_message\030\001 \001(\0132\030.Me"
  "ssages.InitialMessageH\000\022%\n\004msg0\030\002 \001(\0132\025."
  "Messages.MessageMsg0H\000\022%\n\004msg2\030\003 \001(\0132\025.M"
  "essages.MessageMSG2H\000\022;\n\023attestation_mes"
  "sage\030\004 \001(\0132\034.Messages.AttestationMessage"
  "H\000\022=\n\025message_psi_hash_data\030\005 \001(\0132\034.Mess"
  "ages.MessagePsiHashDataH\000\022N\n\036message_psi"
  "_hash_data_finished\030\006 \001(\0132$.Messages.Mes"
  "sagePsiHashDataFinishedH\000B\010\n\006action\"\305\002\n\024"
  "JudgeContactResponse\022%\n\004msg0\030\001 \001(\0132\025.Mes"
  "sages.MessageMsg0H\000\022%\n\004msg1\030\002 \001(\0132\025.Mess"
  "ages.MessageMSG1H\000\022%\n\004msg3\030\003 \001(\0132\025.Messa"
  "ges.MessageMSG3H\000\0224\n\020message_psi_salt\030\004 "
  "\001(\0132\030.Messages.MessagePsiSaltH\000\0228\n\022messa"
  "ge_psi_result\030\005 \001(\0132\032.Messages.MessagePs"
  "iResultH\000\022>\n\025message_psi_intersect\030\006 \001(\013"
  "2\035.Messages.MessagePsiIntersectH\000B\010\n\006act"
  "ion\",\n\016InitialMessage\022\014\n\004type\030\001 \002(\r\022\014\n\004s"
  "ize\030\002 \001(\r\"9\n\013MessageMsg0\022\014\n\004type\030\001 \002(\r\022\014"
  "\n\004epid\030\002 \002(\r\022\016\n\006status\030\003 \001(\r\"_\n\013MessageM"
  "SG1\022\014\n\004type\030\001 \002(\r\022\017\n\007context\030\002 \002(\r\022\017\n\003Ga"
  "X\030\003 \003(\rB\002\020\001\022\017\n\003GaY\030\004 \003(\rB\002\020\001\022\017\n\003GID\030\005 \003("
  "\rB\002\020\001\"\226\002\n\013MessageMSG2\022\014\n\004type\030\001 \002(\r\022\014\n\004s"
  "ize\030\002 \001(\r\022\017\n\007context\030\003 \002(\r\022\031\n\rpublic_key"
  "_gx\030\004 \003(\rB\002\020\001\022\031\n\rpublic_key_gy\030\005 \003(\rB\002\020\001"
  "\022\022\n\nquote_type\030\006 \001(\r\022\020\n\004spid\030\007 \003(\rB\002\020\001\022\023"
  "\n\013cmac_kdf_id\030\010 \001(\r\022\027\n\013signature_x\030\t \003(\r"
  "B\002\020\001\022\027\n\013signature_y\030\n \003(\rB\002\020\001\022\020\n\004smac\030\013 "
  "\003(\rB\002\020\001\022\022\n\nsize_sigrl\030\014 \001(\r\022\021\n\005sigrl\030\r \003"
  "(\rB\002\020\001\"\250\001\n\013MessageMSG3\022\014\n\004type\030\001 \002(\r\022\014\n\004"
  "size\030\002 \001(\r\022\017\n\007context\030\003 \002(\r\022\023\n\007sgx_mac\030\004"
  " \003(\rB\002\020\001\022\024\n\010gax_msg3\030\005 \003(\rB\002\020\001\022\024\n\010gay_ms"
  "g3\030\006 \003(\rB\002\020\001\022\030\n\014sec_property\030\007 \003(\rB\002\020\001\022\021"
  "\n\005quote\030\010 \003(\rB\002\020\001\"\321\003\n\022AttestationMessage"
  "\022\014\n\004type\030\001 \002(\r\022\014\n\004size\030\002 \002(\r\022\017\n\007context\030"
  "\003 \002(\r\022\014\n\004mode\030\004 \002(\r\022\031\n\021epid_group_status"
  "\030\005 \001(\r\022\035\n\025tcb_evaluation_status\030\006 \001(\r\022\035\n"
  "\025pse_evaluation_status\030\007 \001(\r\022&\n\032latest_e"
  "quivalent_tcb_psvn\030\010 \003(\rB\002\020\001\022\035\n\021latest_p"
  "se_isvsvn\030\t \003(\rB\002\020\001\022\033\n\017latest_psda_svn\030\n"
  " \003(\rB\002\020\001\022!\n\025performance_rekey_gid\030\013 \003(\rB"
  "\002\020\001\022\030\n\014ec_sign256_x\030\014 \003(\rB\002\020\001\022\030\n\014ec_sign"
  "256_y\030\r \003(\rB\002\020\001\022\023\n\007mac_smk\030\016 \003(\rB\002\020\001\022\023\n\013"
  "result_size\030\017 \001(\r\022\024\n\010reserved\030\020 \003(\rB\002\020\001\022"
  "\027\n\013payload_tag\030\021 \003(\rB\002\020\001\022\023\n\007payload\030\022 \003("
  "\rB\002\020\001\"{\n\016MessagePsiSalt\022\014\n\004type\030\001 \002(\r\022\014\n"
  "\004size\030\002 \002(\r\022\017\n\007context\030\003 \002(\r\022\n\n\002id\030\004 \002(\r"
  "\022\r\n\005state\030\005 \002(\r\022\017\n\003mac\030\006 \003(\rB\002\020\001\022\020\n\004salt"
  "\030\007 \003(\rB\002\020\001\"~\n\022MessagePsiHashData\022\014\n\004type"
  "\030\001 \002(\r\022\014\n\004size\030\002 \002(\r\022\014\n\004mode\030\003 \002(\r\022\017\n\007co"
  "ntext\030\004 \002(\r\022\n\n\002id\030\005 \002(\r\022\017\n\003mac\030\006 \003(\rB\002\020\001"
  "\022\020\n\004data\030\007 \003(\rB\002\020\001\"c\n\032MessagePsiHashData"
  "Finished\022\014\n\004type\030\001 \002(\r\022\014\n\004size\030\002 \002(\r\022\014\n\004"
  "mode\030\003 \002(\r\022\017\n\007context\030\004 \002(\r\022\n\n\002id\030\005 \002(\r\""
  "Z\n\020MessagePsiResult\022\014\n\004type\030\001 \002(\r\022\014\n\004siz"
  "e\030\002 \002(\r\022\017\n\007context\030\003 \002(\r\022\n\n\002id\030\004 \002(\r\022\r\n\005"
  "state\030\005 \002(\r\"q\n\023MessagePsiIntersect\022\014\n\004ty"
  "pe\030\001 \002(\r\022\014\n\004size\030\002 \002(\r\022\017\n\007context\030\003 \002(\r\022"
  "\n\n\002id\030\004 \002(\r\022\017\n\003mac\030\005 \003(\rB\002\020\001\022\020\n\004data\030\006 \003"
  "(\rB\002\020\0012d\n\rContactTracer\022S\n\014JudgeContact\022"
  "\035.Messages.JudgeContactRequest\032\036.Message"
  "s.JudgeContactResponse\"\000(\0010\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Messages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Messages_2eproto_sccs[13] = {
  &scc_info_AttestationMessage_Messages_2eproto.base,
  &scc_info_InitialMessage_Messages_2eproto.base,
  &scc_info_JudgeContactRequest_Messages_2eproto.base,
  &scc_info_JudgeContactResponse_Messages_2eproto.base,
  &scc_info_MessageMSG1_Messages_2eproto.base,
  &scc_info_MessageMSG2_Messages_2eproto.base,
  &scc_info_MessageMSG3_Messages_2eproto.base,
  &scc_info_MessageMsg0_Messages_2eproto.base,
  &scc_info_MessagePsiHashData_Messages_2eproto.base,
  &scc_info_MessagePsiHashDataFinished_Messages_2eproto.base,
  &scc_info_MessagePsiIntersect_Messages_2eproto.base,
  &scc_info_MessagePsiResult_Messages_2eproto.base,
  &scc_info_MessagePsiSalt_Messages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Messages_2eproto_once;
static bool descriptor_table_Messages_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Messages_2eproto = {
  &descriptor_table_Messages_2eproto_initialized, descriptor_table_protodef_Messages_2eproto, "Messages.proto", 2508,
  &descriptor_table_Messages_2eproto_once, descriptor_table_Messages_2eproto_sccs, descriptor_table_Messages_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_Messages_2eproto::offsets,
  file_level_metadata_Messages_2eproto, 13, file_level_enum_descriptors_Messages_2eproto, file_level_service_descriptors_Messages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Messages_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Messages_2eproto), true);
namespace Messages {

// ===================================================================

void JudgeContactRequest::InitAsDefaultInstance() {
  ::Messages::_JudgeContactRequest_default_instance_.initial_message_ = const_cast< ::Messages::InitialMessage*>(
      ::Messages::InitialMessage::internal_default_instance());
  ::Messages::_JudgeContactRequest_default_instance_.msg0_ = const_cast< ::Messages::MessageMsg0*>(
      ::Messages::MessageMsg0::internal_default_instance());
  ::Messages::_JudgeContactRequest_default_instance_.msg2_ = const_cast< ::Messages::MessageMSG2*>(
      ::Messages::MessageMSG2::internal_default_instance());
  ::Messages::_JudgeContactRequest_default_instance_.attestation_message_ = const_cast< ::Messages::AttestationMessage*>(
      ::Messages::AttestationMessage::internal_default_instance());
  ::Messages::_JudgeContactRequest_default_instance_.message_psi_hash_data_ = const_cast< ::Messages::MessagePsiHashData*>(
      ::Messages::MessagePsiHashData::internal_default_instance());
  ::Messages::_JudgeContactRequest_default_instance_.message_psi_hash_data_finished_ = const_cast< ::Messages::MessagePsiHashDataFinished*>(
      ::Messages::MessagePsiHashDataFinished::internal_default_instance());
}
class JudgeContactRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<JudgeContactRequest>()._has_bits_);
  static const ::Messages::InitialMessage& initial_message(const JudgeContactRequest* msg);
  static const ::Messages::MessageMsg0& msg0(const JudgeContactRequest* msg);
  static const ::Messages::MessageMSG2& msg2(const JudgeContactRequest* msg);
  static const ::Messages::AttestationMessage& attestation_message(const JudgeContactRequest* msg);
  static const ::Messages::MessagePsiHashData& message_psi_hash_data(const JudgeContactRequest* msg);
  static const ::Messages::MessagePsiHashDataFinished& message_psi_hash_data_finished(const JudgeContactRequest* msg);
};

const ::Messages::InitialMessage&
JudgeContactRequest::_Internal::initial_message(const JudgeContactRequest* msg) {
  return *msg->action_.initial_message_;
}
const ::Messages::MessageMsg0&
JudgeContactRequest::_Internal::msg0(const JudgeContactRequest* msg) {
  return *msg->action_.msg0_;
}
const ::Messages::MessageMSG2&
JudgeContactRequest::_Internal::msg2(const JudgeContactRequest* msg) {
  return *msg->action_.msg2_;
}
const ::Messages::AttestationMessage&
JudgeContactRequest::_Internal::attestation_message(const JudgeContactRequest* msg) {
  return *msg->action_.attestation_message_;
}
const ::Messages::MessagePsiHashData&
JudgeContactRequest::_Internal::message_psi_hash_data(const JudgeContactRequest* msg) {
  return *msg->action_.message_psi_hash_data_;
}
const ::Messages::MessagePsiHashDataFinished&
JudgeContactRequest::_Internal::message_psi_hash_data_finished(const JudgeContactRequest* msg) {
  return *msg->action_.message_psi_hash_data_finished_;
}
void JudgeContactRequest::set_allocated_initial_message(::Messages::InitialMessage* initial_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (initial_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      initial_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_message, submessage_arena);
    }
    set_has_initial_message();
    action_.initial_message_ = initial_message;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactRequest.initial_message)
}
void JudgeContactRequest::set_allocated_msg0(::Messages::MessageMsg0* msg0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (msg0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg0, submessage_arena);
    }
    set_has_msg0();
    action_.msg0_ = msg0;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactRequest.msg0)
}
void JudgeContactRequest::set_allocated_msg2(::Messages::MessageMSG2* msg2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (msg2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg2, submessage_arena);
    }
    set_has_msg2();
    action_.msg2_ = msg2;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactRequest.msg2)
}
void JudgeContactRequest::set_allocated_attestation_message(::Messages::AttestationMessage* attestation_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (attestation_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attestation_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attestation_message, submessage_arena);
    }
    set_has_attestation_message();
    action_.attestation_message_ = attestation_message;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactRequest.attestation_message)
}
void JudgeContactRequest::set_allocated_message_psi_hash_data(::Messages::MessagePsiHashData* message_psi_hash_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (message_psi_hash_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_psi_hash_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_psi_hash_data, submessage_arena);
    }
    set_has_message_psi_hash_data();
    action_.message_psi_hash_data_ = message_psi_hash_data;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactRequest.message_psi_hash_data)
}
void JudgeContactRequest::set_allocated_message_psi_hash_data_finished(::Messages::MessagePsiHashDataFinished* message_psi_hash_data_finished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (message_psi_hash_data_finished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_psi_hash_data_finished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_psi_hash_data_finished, submessage_arena);
    }
    set_has_message_psi_hash_data_finished();
    action_.message_psi_hash_data_finished_ = message_psi_hash_data_finished;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactRequest.message_psi_hash_data_finished)
}
JudgeContactRequest::JudgeContactRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.JudgeContactRequest)
}
JudgeContactRequest::JudgeContactRequest(const JudgeContactRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kInitialMessage: {
      _internal_mutable_initial_message()->::Messages::InitialMessage::MergeFrom(from._internal_initial_message());
      break;
    }
    case kMsg0: {
      _internal_mutable_msg0()->::Messages::MessageMsg0::MergeFrom(from._internal_msg0());
      break;
    }
    case kMsg2: {
      _internal_mutable_msg2()->::Messages::MessageMSG2::MergeFrom(from._internal_msg2());
      break;
    }
    case kAttestationMessage: {
      _internal_mutable_attestation_message()->::Messages::AttestationMessage::MergeFrom(from._internal_attestation_message());
      break;
    }
    case kMessagePsiHashData: {
      _internal_mutable_message_psi_hash_data()->::Messages::MessagePsiHashData::MergeFrom(from._internal_message_psi_hash_data());
      break;
    }
    case kMessagePsiHashDataFinished: {
      _internal_mutable_message_psi_hash_data_finished()->::Messages::MessagePsiHashDataFinished::MergeFrom(from._internal_message_psi_hash_data_finished());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Messages.JudgeContactRequest)
}

void JudgeContactRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JudgeContactRequest_Messages_2eproto.base);
  clear_has_action();
}

JudgeContactRequest::~JudgeContactRequest() {
  // @@protoc_insertion_point(destructor:Messages.JudgeContactRequest)
  SharedDtor();
}

void JudgeContactRequest::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void JudgeContactRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JudgeContactRequest& JudgeContactRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JudgeContactRequest_Messages_2eproto.base);
  return *internal_default_instance();
}


void JudgeContactRequest::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:Messages.JudgeContactRequest)
  switch (action_case()) {
    case kInitialMessage: {
      delete action_.initial_message_;
      break;
    }
    case kMsg0: {
      delete action_.msg0_;
      break;
    }
    case kMsg2: {
      delete action_.msg2_;
      break;
    }
    case kAttestationMessage: {
      delete action_.attestation_message_;
      break;
    }
    case kMessagePsiHashData: {
      delete action_.message_psi_hash_data_;
      break;
    }
    case kMessagePsiHashDataFinished: {
      delete action_.message_psi_hash_data_finished_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void JudgeContactRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.JudgeContactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* JudgeContactRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Messages.InitialMessage initial_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessageMsg0 msg0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessageMSG2 msg2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.AttestationMessage attestation_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attestation_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessagePsiHashData message_psi_hash_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_psi_hash_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessagePsiHashDataFinished message_psi_hash_data_finished = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_psi_hash_data_finished(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JudgeContactRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.JudgeContactRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kInitialMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::initial_message(this), target, stream);
      break;
    }
    case kMsg0: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::msg0(this), target, stream);
      break;
    }
    case kMsg2: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::msg2(this), target, stream);
      break;
    }
    case kAttestationMessage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::attestation_message(this), target, stream);
      break;
    }
    case kMessagePsiHashData: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::message_psi_hash_data(this), target, stream);
      break;
    }
    case kMessagePsiHashDataFinished: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::message_psi_hash_data_finished(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.JudgeContactRequest)
  return target;
}

size_t JudgeContactRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.JudgeContactRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // optional .Messages.InitialMessage initial_message = 1;
    case kInitialMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.initial_message_);
      break;
    }
    // optional .Messages.MessageMsg0 msg0 = 2;
    case kMsg0: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.msg0_);
      break;
    }
    // optional .Messages.MessageMSG2 msg2 = 3;
    case kMsg2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.msg2_);
      break;
    }
    // optional .Messages.AttestationMessage attestation_message = 4;
    case kAttestationMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.attestation_message_);
      break;
    }
    // optional .Messages.MessagePsiHashData message_psi_hash_data = 5;
    case kMessagePsiHashData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.message_psi_hash_data_);
      break;
    }
    // optional .Messages.MessagePsiHashDataFinished message_psi_hash_data_finished = 6;
    case kMessagePsiHashDataFinished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.message_psi_hash_data_finished_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JudgeContactRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.JudgeContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JudgeContactRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JudgeContactRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.JudgeContactRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.JudgeContactRequest)
    MergeFrom(*source);
  }
}

void JudgeContactRequest::MergeFrom(const JudgeContactRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.JudgeContactRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kInitialMessage: {
      _internal_mutable_initial_message()->::Messages::InitialMessage::MergeFrom(from._internal_initial_message());
      break;
    }
    case kMsg0: {
      _internal_mutable_msg0()->::Messages::MessageMsg0::MergeFrom(from._internal_msg0());
      break;
    }
    case kMsg2: {
      _internal_mutable_msg2()->::Messages::MessageMSG2::MergeFrom(from._internal_msg2());
      break;
    }
    case kAttestationMessage: {
      _internal_mutable_attestation_message()->::Messages::AttestationMessage::MergeFrom(from._internal_attestation_message());
      break;
    }
    case kMessagePsiHashData: {
      _internal_mutable_message_psi_hash_data()->::Messages::MessagePsiHashData::MergeFrom(from._internal_message_psi_hash_data());
      break;
    }
    case kMessagePsiHashDataFinished: {
      _internal_mutable_message_psi_hash_data_finished()->::Messages::MessagePsiHashDataFinished::MergeFrom(from._internal_message_psi_hash_data_finished());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void JudgeContactRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.JudgeContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JudgeContactRequest::CopyFrom(const JudgeContactRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.JudgeContactRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JudgeContactRequest::IsInitialized() const {
  switch (action_case()) {
    case kInitialMessage: {
      if (has_initial_message()) {
        if (!this->initial_message().IsInitialized()) return false;
      }
      break;
    }
    case kMsg0: {
      if (has_msg0()) {
        if (!this->msg0().IsInitialized()) return false;
      }
      break;
    }
    case kMsg2: {
      if (has_msg2()) {
        if (!this->msg2().IsInitialized()) return false;
      }
      break;
    }
    case kAttestationMessage: {
      if (has_attestation_message()) {
        if (!this->attestation_message().IsInitialized()) return false;
      }
      break;
    }
    case kMessagePsiHashData: {
      if (has_message_psi_hash_data()) {
        if (!this->message_psi_hash_data().IsInitialized()) return false;
      }
      break;
    }
    case kMessagePsiHashDataFinished: {
      if (has_message_psi_hash_data_finished()) {
        if (!this->message_psi_hash_data_finished().IsInitialized()) return false;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return true;
}

void JudgeContactRequest::InternalSwap(JudgeContactRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata JudgeContactRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JudgeContactResponse::InitAsDefaultInstance() {
  ::Messages::_JudgeContactResponse_default_instance_.msg0_ = const_cast< ::Messages::MessageMsg0*>(
      ::Messages::MessageMsg0::internal_default_instance());
  ::Messages::_JudgeContactResponse_default_instance_.msg1_ = const_cast< ::Messages::MessageMSG1*>(
      ::Messages::MessageMSG1::internal_default_instance());
  ::Messages::_JudgeContactResponse_default_instance_.msg3_ = const_cast< ::Messages::MessageMSG3*>(
      ::Messages::MessageMSG3::internal_default_instance());
  ::Messages::_JudgeContactResponse_default_instance_.message_psi_salt_ = const_cast< ::Messages::MessagePsiSalt*>(
      ::Messages::MessagePsiSalt::internal_default_instance());
  ::Messages::_JudgeContactResponse_default_instance_.message_psi_result_ = const_cast< ::Messages::MessagePsiResult*>(
      ::Messages::MessagePsiResult::internal_default_instance());
  ::Messages::_JudgeContactResponse_default_instance_.message_psi_intersect_ = const_cast< ::Messages::MessagePsiIntersect*>(
      ::Messages::MessagePsiIntersect::internal_default_instance());
}
class JudgeContactResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<JudgeContactResponse>()._has_bits_);
  static const ::Messages::MessageMsg0& msg0(const JudgeContactResponse* msg);
  static const ::Messages::MessageMSG1& msg1(const JudgeContactResponse* msg);
  static const ::Messages::MessageMSG3& msg3(const JudgeContactResponse* msg);
  static const ::Messages::MessagePsiSalt& message_psi_salt(const JudgeContactResponse* msg);
  static const ::Messages::MessagePsiResult& message_psi_result(const JudgeContactResponse* msg);
  static const ::Messages::MessagePsiIntersect& message_psi_intersect(const JudgeContactResponse* msg);
};

const ::Messages::MessageMsg0&
JudgeContactResponse::_Internal::msg0(const JudgeContactResponse* msg) {
  return *msg->action_.msg0_;
}
const ::Messages::MessageMSG1&
JudgeContactResponse::_Internal::msg1(const JudgeContactResponse* msg) {
  return *msg->action_.msg1_;
}
const ::Messages::MessageMSG3&
JudgeContactResponse::_Internal::msg3(const JudgeContactResponse* msg) {
  return *msg->action_.msg3_;
}
const ::Messages::MessagePsiSalt&
JudgeContactResponse::_Internal::message_psi_salt(const JudgeContactResponse* msg) {
  return *msg->action_.message_psi_salt_;
}
const ::Messages::MessagePsiResult&
JudgeContactResponse::_Internal::message_psi_result(const JudgeContactResponse* msg) {
  return *msg->action_.message_psi_result_;
}
const ::Messages::MessagePsiIntersect&
JudgeContactResponse::_Internal::message_psi_intersect(const JudgeContactResponse* msg) {
  return *msg->action_.message_psi_intersect_;
}
void JudgeContactResponse::set_allocated_msg0(::Messages::MessageMsg0* msg0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (msg0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg0, submessage_arena);
    }
    set_has_msg0();
    action_.msg0_ = msg0;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactResponse.msg0)
}
void JudgeContactResponse::set_allocated_msg1(::Messages::MessageMSG1* msg1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (msg1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg1, submessage_arena);
    }
    set_has_msg1();
    action_.msg1_ = msg1;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactResponse.msg1)
}
void JudgeContactResponse::set_allocated_msg3(::Messages::MessageMSG3* msg3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (msg3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msg3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg3, submessage_arena);
    }
    set_has_msg3();
    action_.msg3_ = msg3;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactResponse.msg3)
}
void JudgeContactResponse::set_allocated_message_psi_salt(::Messages::MessagePsiSalt* message_psi_salt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (message_psi_salt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_psi_salt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_psi_salt, submessage_arena);
    }
    set_has_message_psi_salt();
    action_.message_psi_salt_ = message_psi_salt;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactResponse.message_psi_salt)
}
void JudgeContactResponse::set_allocated_message_psi_result(::Messages::MessagePsiResult* message_psi_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (message_psi_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_psi_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_psi_result, submessage_arena);
    }
    set_has_message_psi_result();
    action_.message_psi_result_ = message_psi_result;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactResponse.message_psi_result)
}
void JudgeContactResponse::set_allocated_message_psi_intersect(::Messages::MessagePsiIntersect* message_psi_intersect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (message_psi_intersect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_psi_intersect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_psi_intersect, submessage_arena);
    }
    set_has_message_psi_intersect();
    action_.message_psi_intersect_ = message_psi_intersect;
  }
  // @@protoc_insertion_point(field_set_allocated:Messages.JudgeContactResponse.message_psi_intersect)
}
JudgeContactResponse::JudgeContactResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.JudgeContactResponse)
}
JudgeContactResponse::JudgeContactResponse(const JudgeContactResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kMsg0: {
      _internal_mutable_msg0()->::Messages::MessageMsg0::MergeFrom(from._internal_msg0());
      break;
    }
    case kMsg1: {
      _internal_mutable_msg1()->::Messages::MessageMSG1::MergeFrom(from._internal_msg1());
      break;
    }
    case kMsg3: {
      _internal_mutable_msg3()->::Messages::MessageMSG3::MergeFrom(from._internal_msg3());
      break;
    }
    case kMessagePsiSalt: {
      _internal_mutable_message_psi_salt()->::Messages::MessagePsiSalt::MergeFrom(from._internal_message_psi_salt());
      break;
    }
    case kMessagePsiResult: {
      _internal_mutable_message_psi_result()->::Messages::MessagePsiResult::MergeFrom(from._internal_message_psi_result());
      break;
    }
    case kMessagePsiIntersect: {
      _internal_mutable_message_psi_intersect()->::Messages::MessagePsiIntersect::MergeFrom(from._internal_message_psi_intersect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Messages.JudgeContactResponse)
}

void JudgeContactResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JudgeContactResponse_Messages_2eproto.base);
  clear_has_action();
}

JudgeContactResponse::~JudgeContactResponse() {
  // @@protoc_insertion_point(destructor:Messages.JudgeContactResponse)
  SharedDtor();
}

void JudgeContactResponse::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void JudgeContactResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JudgeContactResponse& JudgeContactResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JudgeContactResponse_Messages_2eproto.base);
  return *internal_default_instance();
}


void JudgeContactResponse::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:Messages.JudgeContactResponse)
  switch (action_case()) {
    case kMsg0: {
      delete action_.msg0_;
      break;
    }
    case kMsg1: {
      delete action_.msg1_;
      break;
    }
    case kMsg3: {
      delete action_.msg3_;
      break;
    }
    case kMessagePsiSalt: {
      delete action_.message_psi_salt_;
      break;
    }
    case kMessagePsiResult: {
      delete action_.message_psi_result_;
      break;
    }
    case kMessagePsiIntersect: {
      delete action_.message_psi_intersect_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void JudgeContactResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.JudgeContactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* JudgeContactResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Messages.MessageMsg0 msg0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessageMSG1 msg1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessageMSG3 msg3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessagePsiSalt message_psi_salt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_psi_salt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessagePsiResult message_psi_result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_psi_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Messages.MessagePsiIntersect message_psi_intersect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_psi_intersect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JudgeContactResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.JudgeContactResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kMsg0: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::msg0(this), target, stream);
      break;
    }
    case kMsg1: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::msg1(this), target, stream);
      break;
    }
    case kMsg3: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::msg3(this), target, stream);
      break;
    }
    case kMessagePsiSalt: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::message_psi_salt(this), target, stream);
      break;
    }
    case kMessagePsiResult: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::message_psi_result(this), target, stream);
      break;
    }
    case kMessagePsiIntersect: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::message_psi_intersect(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.JudgeContactResponse)
  return target;
}

size_t JudgeContactResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.JudgeContactResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (action_case()) {
    // optional .Messages.MessageMsg0 msg0 = 1;
    case kMsg0: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.msg0_);
      break;
    }
    // optional .Messages.MessageMSG1 msg1 = 2;
    case kMsg1: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.msg1_);
      break;
    }
    // optional .Messages.MessageMSG3 msg3 = 3;
    case kMsg3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.msg3_);
      break;
    }
    // optional .Messages.MessagePsiSalt message_psi_salt = 4;
    case kMessagePsiSalt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.message_psi_salt_);
      break;
    }
    // optional .Messages.MessagePsiResult message_psi_result = 5;
    case kMessagePsiResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.message_psi_result_);
      break;
    }
    // optional .Messages.MessagePsiIntersect message_psi_intersect = 6;
    case kMessagePsiIntersect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.message_psi_intersect_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JudgeContactResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.JudgeContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JudgeContactResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JudgeContactResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.JudgeContactResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.JudgeContactResponse)
    MergeFrom(*source);
  }
}

void JudgeContactResponse::MergeFrom(const JudgeContactResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.JudgeContactResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kMsg0: {
      _internal_mutable_msg0()->::Messages::MessageMsg0::MergeFrom(from._internal_msg0());
      break;
    }
    case kMsg1: {
      _internal_mutable_msg1()->::Messages::MessageMSG1::MergeFrom(from._internal_msg1());
      break;
    }
    case kMsg3: {
      _internal_mutable_msg3()->::Messages::MessageMSG3::MergeFrom(from._internal_msg3());
      break;
    }
    case kMessagePsiSalt: {
      _internal_mutable_message_psi_salt()->::Messages::MessagePsiSalt::MergeFrom(from._internal_message_psi_salt());
      break;
    }
    case kMessagePsiResult: {
      _internal_mutable_message_psi_result()->::Messages::MessagePsiResult::MergeFrom(from._internal_message_psi_result());
      break;
    }
    case kMessagePsiIntersect: {
      _internal_mutable_message_psi_intersect()->::Messages::MessagePsiIntersect::MergeFrom(from._internal_message_psi_intersect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void JudgeContactResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.JudgeContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JudgeContactResponse::CopyFrom(const JudgeContactResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.JudgeContactResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JudgeContactResponse::IsInitialized() const {
  switch (action_case()) {
    case kMsg0: {
      if (has_msg0()) {
        if (!this->msg0().IsInitialized()) return false;
      }
      break;
    }
    case kMsg1: {
      if (has_msg1()) {
        if (!this->msg1().IsInitialized()) return false;
      }
      break;
    }
    case kMsg3: {
      if (has_msg3()) {
        if (!this->msg3().IsInitialized()) return false;
      }
      break;
    }
    case kMessagePsiSalt: {
      if (has_message_psi_salt()) {
        if (!this->message_psi_salt().IsInitialized()) return false;
      }
      break;
    }
    case kMessagePsiResult: {
      if (has_message_psi_result()) {
        if (!this->message_psi_result().IsInitialized()) return false;
      }
      break;
    }
    case kMessagePsiIntersect: {
      if (has_message_psi_intersect()) {
        if (!this->message_psi_intersect().IsInitialized()) return false;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return true;
}

void JudgeContactResponse::InternalSwap(JudgeContactResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata JudgeContactResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitialMessage::InitAsDefaultInstance() {
}
class InitialMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<InitialMessage>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InitialMessage::InitialMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.InitialMessage)
}
InitialMessage::InitialMessage(const InitialMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:Messages.InitialMessage)
}

void InitialMessage::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
}

InitialMessage::~InitialMessage() {
  // @@protoc_insertion_point(destructor:Messages.InitialMessage)
  SharedDtor();
}

void InitialMessage::SharedDtor() {
}

void InitialMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialMessage& InitialMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialMessage_Messages_2eproto.base);
  return *internal_default_instance();
}


void InitialMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.InitialMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&type_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* InitialMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.InitialMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.InitialMessage)
  return target;
}

size_t InitialMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.InitialMessage)
  size_t total_size = 0;

  // required uint32 type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 size = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.InitialMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.InitialMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.InitialMessage)
    MergeFrom(*source);
  }
}

void InitialMessage::MergeFrom(const InitialMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.InitialMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitialMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.InitialMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialMessage::CopyFrom(const InitialMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.InitialMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InitialMessage::InternalSwap(InitialMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageMsg0::InitAsDefaultInstance() {
}
class MessageMsg0::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageMsg0>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_epid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MessageMsg0::MessageMsg0()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessageMsg0)
}
MessageMsg0::MessageMsg0(const MessageMsg0& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessageMsg0)
}

void MessageMsg0::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
}

MessageMsg0::~MessageMsg0() {
  // @@protoc_insertion_point(destructor:Messages.MessageMsg0)
  SharedDtor();
}

void MessageMsg0::SharedDtor() {
}

void MessageMsg0::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageMsg0& MessageMsg0::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageMsg0_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessageMsg0::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessageMsg0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&type_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageMsg0::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 epid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_epid(&has_bits);
          epid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageMsg0::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessageMsg0)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 epid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_epid(), target);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessageMsg0)
  return target;
}

size_t MessageMsg0::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessageMsg0)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_epid()) {
    // required uint32 epid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epid());
  }

  return total_size;
}
size_t MessageMsg0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessageMsg0)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 epid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_epid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 status = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageMsg0::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessageMsg0)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageMsg0* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageMsg0>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessageMsg0)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessageMsg0)
    MergeFrom(*source);
  }
}

void MessageMsg0::MergeFrom(const MessageMsg0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessageMsg0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      epid_ = from.epid_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageMsg0::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessageMsg0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMsg0::CopyFrom(const MessageMsg0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessageMsg0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMsg0::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MessageMsg0::InternalSwap(MessageMsg0* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(epid_, other->epid_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMsg0::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageMSG1::InitAsDefaultInstance() {
}
class MessageMSG1::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageMSG1>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MessageMSG1::MessageMSG1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessageMSG1)
}
MessageMSG1::MessageMSG1(const MessageMSG1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      gax_(from.gax_),
      gay_(from.gay_),
      gid_(from.gid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&context_) -
    reinterpret_cast<char*>(&type_)) + sizeof(context_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessageMSG1)
}

void MessageMSG1::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_) -
      reinterpret_cast<char*>(&type_)) + sizeof(context_));
}

MessageMSG1::~MessageMSG1() {
  // @@protoc_insertion_point(destructor:Messages.MessageMSG1)
  SharedDtor();
}

void MessageMSG1::SharedDtor() {
}

void MessageMSG1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageMSG1& MessageMSG1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageMSG1_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessageMSG1::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessageMSG1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gax_.Clear();
  gay_.Clear();
  gid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&context_) -
        reinterpret_cast<char*>(&type_)) + sizeof(context_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageMSG1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 GaX = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gax(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_gax(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 GaY = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gay(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_gay(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 GID = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_gid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageMSG1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessageMSG1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_context(), target);
  }

  // repeated uint32 GaX = 3 [packed = true];
  {
    int byte_size = _gax_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_gax(), byte_size, target);
    }
  }

  // repeated uint32 GaY = 4 [packed = true];
  {
    int byte_size = _gay_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_gay(), byte_size, target);
    }
  }

  // repeated uint32 GID = 5 [packed = true];
  {
    int byte_size = _gid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_gid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessageMSG1)
  return target;
}

size_t MessageMSG1::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessageMSG1)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_context()) {
    // required uint32 context = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  return total_size;
}
size_t MessageMSG1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessageMSG1)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 context = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 GaX = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gax_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gax_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 GaY = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gay_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gay_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 GID = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageMSG1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessageMSG1)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageMSG1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageMSG1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessageMSG1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessageMSG1)
    MergeFrom(*source);
  }
}

void MessageMSG1::MergeFrom(const MessageMSG1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessageMSG1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gax_.MergeFrom(from.gax_);
  gay_.MergeFrom(from.gay_);
  gid_.MergeFrom(from.gid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      context_ = from.context_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageMSG1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessageMSG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMSG1::CopyFrom(const MessageMSG1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessageMSG1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMSG1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MessageMSG1::InternalSwap(MessageMSG1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gax_.InternalSwap(&other->gax_);
  gay_.InternalSwap(&other->gay_);
  gid_.InternalSwap(&other->gid_);
  swap(type_, other->type_);
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMSG1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageMSG2::InitAsDefaultInstance() {
}
class MessageMSG2::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageMSG2>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_quote_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cmac_kdf_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_size_sigrl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MessageMSG2::MessageMSG2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessageMSG2)
}
MessageMSG2::MessageMSG2(const MessageMSG2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      public_key_gx_(from.public_key_gx_),
      public_key_gy_(from.public_key_gy_),
      spid_(from.spid_),
      signature_x_(from.signature_x_),
      signature_y_(from.signature_y_),
      smac_(from.smac_),
      sigrl_(from.sigrl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_sigrl_) -
    reinterpret_cast<char*>(&type_)) + sizeof(size_sigrl_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessageMSG2)
}

void MessageMSG2::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_sigrl_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_sigrl_));
}

MessageMSG2::~MessageMSG2() {
  // @@protoc_insertion_point(destructor:Messages.MessageMSG2)
  SharedDtor();
}

void MessageMSG2::SharedDtor() {
}

void MessageMSG2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageMSG2& MessageMSG2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageMSG2_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessageMSG2::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessageMSG2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_gx_.Clear();
  public_key_gy_.Clear();
  spid_.Clear();
  signature_x_.Clear();
  signature_y_.Clear();
  smac_.Clear();
  sigrl_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_sigrl_) -
        reinterpret_cast<char*>(&type_)) + sizeof(size_sigrl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageMSG2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 public_key_gx = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_public_key_gx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_public_key_gx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 public_key_gy = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_public_key_gy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_public_key_gy(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quote_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_quote_type(&has_bits);
          quote_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 spid = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_spid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_spid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cmac_kdf_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_cmac_kdf_id(&has_bits);
          cmac_kdf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 signature_x = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_signature_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_signature_x(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 signature_y = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_signature_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_signature_y(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 smac = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_smac(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_smac(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size_sigrl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_size_sigrl(&has_bits);
          size_sigrl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sigrl = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sigrl(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_sigrl(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageMSG2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessageMSG2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // required uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context(), target);
  }

  // repeated uint32 public_key_gx = 4 [packed = true];
  {
    int byte_size = _public_key_gx_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_public_key_gx(), byte_size, target);
    }
  }

  // repeated uint32 public_key_gy = 5 [packed = true];
  {
    int byte_size = _public_key_gy_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_public_key_gy(), byte_size, target);
    }
  }

  // optional uint32 quote_type = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_quote_type(), target);
  }

  // repeated uint32 spid = 7 [packed = true];
  {
    int byte_size = _spid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_spid(), byte_size, target);
    }
  }

  // optional uint32 cmac_kdf_id = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cmac_kdf_id(), target);
  }

  // repeated uint32 signature_x = 9 [packed = true];
  {
    int byte_size = _signature_x_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_signature_x(), byte_size, target);
    }
  }

  // repeated uint32 signature_y = 10 [packed = true];
  {
    int byte_size = _signature_y_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_signature_y(), byte_size, target);
    }
  }

  // repeated uint32 smac = 11 [packed = true];
  {
    int byte_size = _smac_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_smac(), byte_size, target);
    }
  }

  // optional uint32 size_sigrl = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_size_sigrl(), target);
  }

  // repeated uint32 sigrl = 13 [packed = true];
  {
    int byte_size = _sigrl_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          13, _internal_sigrl(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessageMSG2)
  return target;
}

size_t MessageMSG2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessageMSG2)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_context()) {
    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  return total_size;
}
size_t MessageMSG2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessageMSG2)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 public_key_gx = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->public_key_gx_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _public_key_gx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 public_key_gy = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->public_key_gy_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _public_key_gy_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 spid = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->spid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _spid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 signature_x = 9 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->signature_x_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _signature_x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 signature_y = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->signature_y_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _signature_y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 smac = 11 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->smac_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _smac_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 sigrl = 13 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sigrl_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sigrl_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 size = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (cached_has_bits & 0x00000038u) {
    // optional uint32 quote_type = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quote_type());
    }

    // optional uint32 cmac_kdf_id = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cmac_kdf_id());
    }

    // optional uint32 size_sigrl = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size_sigrl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageMSG2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessageMSG2)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageMSG2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageMSG2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessageMSG2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessageMSG2)
    MergeFrom(*source);
  }
}

void MessageMSG2::MergeFrom(const MessageMSG2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessageMSG2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_key_gx_.MergeFrom(from.public_key_gx_);
  public_key_gy_.MergeFrom(from.public_key_gy_);
  spid_.MergeFrom(from.spid_);
  signature_x_.MergeFrom(from.signature_x_);
  signature_y_.MergeFrom(from.signature_y_);
  smac_.MergeFrom(from.smac_);
  sigrl_.MergeFrom(from.sigrl_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      quote_type_ = from.quote_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmac_kdf_id_ = from.cmac_kdf_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      size_sigrl_ = from.size_sigrl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageMSG2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessageMSG2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMSG2::CopyFrom(const MessageMSG2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessageMSG2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMSG2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void MessageMSG2::InternalSwap(MessageMSG2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_key_gx_.InternalSwap(&other->public_key_gx_);
  public_key_gy_.InternalSwap(&other->public_key_gy_);
  spid_.InternalSwap(&other->spid_);
  signature_x_.InternalSwap(&other->signature_x_);
  signature_y_.InternalSwap(&other->signature_y_);
  smac_.InternalSwap(&other->smac_);
  sigrl_.InternalSwap(&other->sigrl_);
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(context_, other->context_);
  swap(quote_type_, other->quote_type_);
  swap(cmac_kdf_id_, other->cmac_kdf_id_);
  swap(size_sigrl_, other->size_sigrl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMSG2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageMSG3::InitAsDefaultInstance() {
}
class MessageMSG3::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageMSG3>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MessageMSG3::MessageMSG3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessageMSG3)
}
MessageMSG3::MessageMSG3(const MessageMSG3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sgx_mac_(from.sgx_mac_),
      gax_msg3_(from.gax_msg3_),
      gay_msg3_(from.gay_msg3_),
      sec_property_(from.sec_property_),
      quote_(from.quote_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&context_) -
    reinterpret_cast<char*>(&type_)) + sizeof(context_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessageMSG3)
}

void MessageMSG3::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_) -
      reinterpret_cast<char*>(&type_)) + sizeof(context_));
}

MessageMSG3::~MessageMSG3() {
  // @@protoc_insertion_point(destructor:Messages.MessageMSG3)
  SharedDtor();
}

void MessageMSG3::SharedDtor() {
}

void MessageMSG3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageMSG3& MessageMSG3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageMSG3_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessageMSG3::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessageMSG3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sgx_mac_.Clear();
  gax_msg3_.Clear();
  gay_msg3_.Clear();
  sec_property_.Clear();
  quote_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&context_) -
        reinterpret_cast<char*>(&type_)) + sizeof(context_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageMSG3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sgx_mac = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sgx_mac(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_sgx_mac(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 gax_msg3 = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gax_msg3(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_gax_msg3(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 gay_msg3 = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gay_msg3(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_gay_msg3(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sec_property = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sec_property(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_sec_property(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 quote = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_quote(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_quote(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageMSG3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessageMSG3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // required uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context(), target);
  }

  // repeated uint32 sgx_mac = 4 [packed = true];
  {
    int byte_size = _sgx_mac_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_sgx_mac(), byte_size, target);
    }
  }

  // repeated uint32 gax_msg3 = 5 [packed = true];
  {
    int byte_size = _gax_msg3_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_gax_msg3(), byte_size, target);
    }
  }

  // repeated uint32 gay_msg3 = 6 [packed = true];
  {
    int byte_size = _gay_msg3_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_gay_msg3(), byte_size, target);
    }
  }

  // repeated uint32 sec_property = 7 [packed = true];
  {
    int byte_size = _sec_property_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_sec_property(), byte_size, target);
    }
  }

  // repeated uint32 quote = 8 [packed = true];
  {
    int byte_size = _quote_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_quote(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessageMSG3)
  return target;
}

size_t MessageMSG3::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessageMSG3)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_context()) {
    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  return total_size;
}
size_t MessageMSG3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessageMSG3)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sgx_mac = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sgx_mac_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sgx_mac_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 gax_msg3 = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gax_msg3_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gax_msg3_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 gay_msg3 = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gay_msg3_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gay_msg3_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 sec_property = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sec_property_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sec_property_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 quote = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->quote_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _quote_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 size = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageMSG3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessageMSG3)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageMSG3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageMSG3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessageMSG3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessageMSG3)
    MergeFrom(*source);
  }
}

void MessageMSG3::MergeFrom(const MessageMSG3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessageMSG3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sgx_mac_.MergeFrom(from.sgx_mac_);
  gax_msg3_.MergeFrom(from.gax_msg3_);
  gay_msg3_.MergeFrom(from.gay_msg3_);
  sec_property_.MergeFrom(from.sec_property_);
  quote_.MergeFrom(from.quote_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      context_ = from.context_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageMSG3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessageMSG3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMSG3::CopyFrom(const MessageMSG3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessageMSG3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMSG3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void MessageMSG3::InternalSwap(MessageMSG3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sgx_mac_.InternalSwap(&other->sgx_mac_);
  gax_msg3_.InternalSwap(&other->gax_msg3_);
  gay_msg3_.InternalSwap(&other->gay_msg3_);
  sec_property_.InternalSwap(&other->sec_property_);
  quote_.InternalSwap(&other->quote_);
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(context_, other->context_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMSG3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttestationMessage::InitAsDefaultInstance() {
}
class AttestationMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AttestationMessage>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_epid_group_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tcb_evaluation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pse_evaluation_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_result_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

AttestationMessage::AttestationMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.AttestationMessage)
}
AttestationMessage::AttestationMessage(const AttestationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      latest_equivalent_tcb_psvn_(from.latest_equivalent_tcb_psvn_),
      latest_pse_isvsvn_(from.latest_pse_isvsvn_),
      latest_psda_svn_(from.latest_psda_svn_),
      performance_rekey_gid_(from.performance_rekey_gid_),
      ec_sign256_x_(from.ec_sign256_x_),
      ec_sign256_y_(from.ec_sign256_y_),
      mac_smk_(from.mac_smk_),
      reserved_(from.reserved_),
      payload_tag_(from.payload_tag_),
      payload_(from.payload_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_size_) -
    reinterpret_cast<char*>(&type_)) + sizeof(result_size_));
  // @@protoc_insertion_point(copy_constructor:Messages.AttestationMessage)
}

void AttestationMessage::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_size_));
}

AttestationMessage::~AttestationMessage() {
  // @@protoc_insertion_point(destructor:Messages.AttestationMessage)
  SharedDtor();
}

void AttestationMessage::SharedDtor() {
}

void AttestationMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttestationMessage& AttestationMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttestationMessage_Messages_2eproto.base);
  return *internal_default_instance();
}


void AttestationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.AttestationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latest_equivalent_tcb_psvn_.Clear();
  latest_pse_isvsvn_.Clear();
  latest_psda_svn_.Clear();
  performance_rekey_gid_.Clear();
  ec_sign256_x_.Clear();
  ec_sign256_y_.Clear();
  mac_smk_.Clear();
  reserved_.Clear();
  payload_tag_.Clear();
  payload_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_size_) -
        reinterpret_cast<char*>(&type_)) + sizeof(result_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AttestationMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 epid_group_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_epid_group_status(&has_bits);
          epid_group_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tcb_evaluation_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tcb_evaluation_status(&has_bits);
          tcb_evaluation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pse_evaluation_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pse_evaluation_status(&has_bits);
          pse_evaluation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 latest_equivalent_tcb_psvn = 8 [packed = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_latest_equivalent_tcb_psvn(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_latest_equivalent_tcb_psvn(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 latest_pse_isvsvn = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_latest_pse_isvsvn(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_latest_pse_isvsvn(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 latest_psda_svn = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_latest_psda_svn(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_latest_psda_svn(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 performance_rekey_gid = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_performance_rekey_gid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_performance_rekey_gid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ec_sign256_x = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ec_sign256_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          _internal_add_ec_sign256_x(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ec_sign256_y = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ec_sign256_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_ec_sign256_y(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mac_smk = 14 [packed = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mac_smk(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_mac_smk(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 result_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_result_size(&has_bits);
          result_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 reserved = 16 [packed = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_reserved(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_reserved(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 payload_tag = 17 [packed = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_payload_tag(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_payload_tag(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 payload = 18 [packed = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_payload(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144) {
          _internal_add_payload(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttestationMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.AttestationMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // required uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context(), target);
  }

  // required uint32 mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mode(), target);
  }

  // optional uint32 epid_group_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_epid_group_status(), target);
  }

  // optional uint32 tcb_evaluation_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tcb_evaluation_status(), target);
  }

  // optional uint32 pse_evaluation_status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pse_evaluation_status(), target);
  }

  // repeated uint32 latest_equivalent_tcb_psvn = 8 [packed = true];
  {
    int byte_size = _latest_equivalent_tcb_psvn_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_latest_equivalent_tcb_psvn(), byte_size, target);
    }
  }

  // repeated uint32 latest_pse_isvsvn = 9 [packed = true];
  {
    int byte_size = _latest_pse_isvsvn_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_latest_pse_isvsvn(), byte_size, target);
    }
  }

  // repeated uint32 latest_psda_svn = 10 [packed = true];
  {
    int byte_size = _latest_psda_svn_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_latest_psda_svn(), byte_size, target);
    }
  }

  // repeated uint32 performance_rekey_gid = 11 [packed = true];
  {
    int byte_size = _performance_rekey_gid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_performance_rekey_gid(), byte_size, target);
    }
  }

  // repeated uint32 ec_sign256_x = 12 [packed = true];
  {
    int byte_size = _ec_sign256_x_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_ec_sign256_x(), byte_size, target);
    }
  }

  // repeated uint32 ec_sign256_y = 13 [packed = true];
  {
    int byte_size = _ec_sign256_y_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          13, _internal_ec_sign256_y(), byte_size, target);
    }
  }

  // repeated uint32 mac_smk = 14 [packed = true];
  {
    int byte_size = _mac_smk_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          14, _internal_mac_smk(), byte_size, target);
    }
  }

  // optional uint32 result_size = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_result_size(), target);
  }

  // repeated uint32 reserved = 16 [packed = true];
  {
    int byte_size = _reserved_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          16, _internal_reserved(), byte_size, target);
    }
  }

  // repeated uint32 payload_tag = 17 [packed = true];
  {
    int byte_size = _payload_tag_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          17, _internal_payload_tag(), byte_size, target);
    }
  }

  // repeated uint32 payload = 18 [packed = true];
  {
    int byte_size = _payload_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          18, _internal_payload(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.AttestationMessage)
  return target;
}

size_t AttestationMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.AttestationMessage)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (_internal_has_context()) {
    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  if (_internal_has_mode()) {
    // required uint32 mode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  return total_size;
}
size_t AttestationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.AttestationMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

    // required uint32 mode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 latest_equivalent_tcb_psvn = 8 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->latest_equivalent_tcb_psvn_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _latest_equivalent_tcb_psvn_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 latest_pse_isvsvn = 9 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->latest_pse_isvsvn_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _latest_pse_isvsvn_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 latest_psda_svn = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->latest_psda_svn_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _latest_psda_svn_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 performance_rekey_gid = 11 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->performance_rekey_gid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _performance_rekey_gid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ec_sign256_x = 12 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ec_sign256_x_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ec_sign256_x_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ec_sign256_y = 13 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ec_sign256_y_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ec_sign256_y_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 mac_smk = 14 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mac_smk_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mac_smk_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 reserved = 16 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->reserved_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _reserved_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 payload_tag = 17 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->payload_tag_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _payload_tag_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 payload = 18 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->payload_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _payload_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional uint32 epid_group_status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_epid_group_status());
    }

    // optional uint32 tcb_evaluation_status = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tcb_evaluation_status());
    }

    // optional uint32 pse_evaluation_status = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pse_evaluation_status());
    }

    // optional uint32 result_size = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_result_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttestationMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.AttestationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AttestationMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttestationMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.AttestationMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.AttestationMessage)
    MergeFrom(*source);
  }
}

void AttestationMessage::MergeFrom(const AttestationMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.AttestationMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latest_equivalent_tcb_psvn_.MergeFrom(from.latest_equivalent_tcb_psvn_);
  latest_pse_isvsvn_.MergeFrom(from.latest_pse_isvsvn_);
  latest_psda_svn_.MergeFrom(from.latest_psda_svn_);
  performance_rekey_gid_.MergeFrom(from.performance_rekey_gid_);
  ec_sign256_x_.MergeFrom(from.ec_sign256_x_);
  ec_sign256_y_.MergeFrom(from.ec_sign256_y_);
  mac_smk_.MergeFrom(from.mac_smk_);
  reserved_.MergeFrom(from.reserved_);
  payload_tag_.MergeFrom(from.payload_tag_);
  payload_.MergeFrom(from.payload_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      epid_group_status_ = from.epid_group_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      tcb_evaluation_status_ = from.tcb_evaluation_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      pse_evaluation_status_ = from.pse_evaluation_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      result_size_ = from.result_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AttestationMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.AttestationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttestationMessage::CopyFrom(const AttestationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.AttestationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttestationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void AttestationMessage::InternalSwap(AttestationMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  latest_equivalent_tcb_psvn_.InternalSwap(&other->latest_equivalent_tcb_psvn_);
  latest_pse_isvsvn_.InternalSwap(&other->latest_pse_isvsvn_);
  latest_psda_svn_.InternalSwap(&other->latest_psda_svn_);
  performance_rekey_gid_.InternalSwap(&other->performance_rekey_gid_);
  ec_sign256_x_.InternalSwap(&other->ec_sign256_x_);
  ec_sign256_y_.InternalSwap(&other->ec_sign256_y_);
  mac_smk_.InternalSwap(&other->mac_smk_);
  reserved_.InternalSwap(&other->reserved_);
  payload_tag_.InternalSwap(&other->payload_tag_);
  payload_.InternalSwap(&other->payload_);
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(context_, other->context_);
  swap(mode_, other->mode_);
  swap(epid_group_status_, other->epid_group_status_);
  swap(tcb_evaluation_status_, other->tcb_evaluation_status_);
  swap(pse_evaluation_status_, other->pse_evaluation_status_);
  swap(result_size_, other->result_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttestationMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagePsiSalt::InitAsDefaultInstance() {
}
class MessagePsiSalt::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagePsiSalt>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MessagePsiSalt::MessagePsiSalt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessagePsiSalt)
}
MessagePsiSalt::MessagePsiSalt(const MessagePsiSalt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mac_(from.mac_),
      salt_(from.salt_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessagePsiSalt)
}

void MessagePsiSalt::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
}

MessagePsiSalt::~MessagePsiSalt() {
  // @@protoc_insertion_point(destructor:Messages.MessagePsiSalt)
  SharedDtor();
}

void MessagePsiSalt::SharedDtor() {
}

void MessagePsiSalt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePsiSalt& MessagePsiSalt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagePsiSalt_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessagePsiSalt::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessagePsiSalt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.Clear();
  salt_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&type_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessagePsiSalt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mac = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mac(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_mac(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 salt = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_salt(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_salt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagePsiSalt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessagePsiSalt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // required uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context(), target);
  }

  // required uint32 id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  // required uint32 state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_state(), target);
  }

  // repeated uint32 mac = 6 [packed = true];
  {
    int byte_size = _mac_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_mac(), byte_size, target);
    }
  }

  // repeated uint32 salt = 7 [packed = true];
  {
    int byte_size = _salt_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_salt(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessagePsiSalt)
  return target;
}

size_t MessagePsiSalt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessagePsiSalt)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (_internal_has_context()) {
    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  if (_internal_has_id()) {
    // required uint32 id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_state()) {
    // required uint32 state = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  return total_size;
}
size_t MessagePsiSalt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessagePsiSalt)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

    // required uint32 id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 state = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mac = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mac_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mac_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 salt = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->salt_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _salt_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePsiSalt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessagePsiSalt)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePsiSalt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagePsiSalt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessagePsiSalt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessagePsiSalt)
    MergeFrom(*source);
  }
}

void MessagePsiSalt::MergeFrom(const MessagePsiSalt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessagePsiSalt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mac_.MergeFrom(from.mac_);
  salt_.MergeFrom(from.salt_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessagePsiSalt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessagePsiSalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePsiSalt::CopyFrom(const MessagePsiSalt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessagePsiSalt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePsiSalt::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MessagePsiSalt::InternalSwap(MessagePsiSalt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mac_.InternalSwap(&other->mac_);
  salt_.InternalSwap(&other->salt_);
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(context_, other->context_);
  swap(id_, other->id_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePsiSalt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagePsiHashData::InitAsDefaultInstance() {
}
class MessagePsiHashData::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagePsiHashData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MessagePsiHashData::MessagePsiHashData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessagePsiHashData)
}
MessagePsiHashData::MessagePsiHashData(const MessagePsiHashData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mac_(from.mac_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessagePsiHashData)
}

void MessagePsiHashData::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

MessagePsiHashData::~MessagePsiHashData() {
  // @@protoc_insertion_point(destructor:Messages.MessagePsiHashData)
  SharedDtor();
}

void MessagePsiHashData::SharedDtor() {
}

void MessagePsiHashData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePsiHashData& MessagePsiHashData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagePsiHashData_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessagePsiHashData::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessagePsiHashData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.Clear();
  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessagePsiHashData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mac = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mac(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_mac(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagePsiHashData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessagePsiHashData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // required uint32 mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mode(), target);
  }

  // required uint32 context = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_context(), target);
  }

  // required uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  // repeated uint32 mac = 6 [packed = true];
  {
    int byte_size = _mac_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_mac(), byte_size, target);
    }
  }

  // repeated uint32 data = 7 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessagePsiHashData)
  return target;
}

size_t MessagePsiHashData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessagePsiHashData)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (_internal_has_mode()) {
    // required uint32 mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  if (_internal_has_context()) {
    // required uint32 context = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  if (_internal_has_id()) {
    // required uint32 id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t MessagePsiHashData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessagePsiHashData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

    // required uint32 mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());

    // required uint32 context = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

    // required uint32 id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mac = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mac_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mac_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 data = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePsiHashData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessagePsiHashData)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePsiHashData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagePsiHashData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessagePsiHashData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessagePsiHashData)
    MergeFrom(*source);
  }
}

void MessagePsiHashData::MergeFrom(const MessagePsiHashData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessagePsiHashData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mac_.MergeFrom(from.mac_);
  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessagePsiHashData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessagePsiHashData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePsiHashData::CopyFrom(const MessagePsiHashData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessagePsiHashData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePsiHashData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MessagePsiHashData::InternalSwap(MessagePsiHashData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mac_.InternalSwap(&other->mac_);
  data_.InternalSwap(&other->data_);
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(mode_, other->mode_);
  swap(context_, other->context_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePsiHashData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagePsiHashDataFinished::InitAsDefaultInstance() {
}
class MessagePsiHashDataFinished::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagePsiHashDataFinished>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MessagePsiHashDataFinished::MessagePsiHashDataFinished()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessagePsiHashDataFinished)
}
MessagePsiHashDataFinished::MessagePsiHashDataFinished(const MessagePsiHashDataFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessagePsiHashDataFinished)
}

void MessagePsiHashDataFinished::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

MessagePsiHashDataFinished::~MessagePsiHashDataFinished() {
  // @@protoc_insertion_point(destructor:Messages.MessagePsiHashDataFinished)
  SharedDtor();
}

void MessagePsiHashDataFinished::SharedDtor() {
}

void MessagePsiHashDataFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePsiHashDataFinished& MessagePsiHashDataFinished::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagePsiHashDataFinished_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessagePsiHashDataFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessagePsiHashDataFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessagePsiHashDataFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagePsiHashDataFinished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessagePsiHashDataFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // required uint32 mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mode(), target);
  }

  // required uint32 context = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_context(), target);
  }

  // required uint32 id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessagePsiHashDataFinished)
  return target;
}

size_t MessagePsiHashDataFinished::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessagePsiHashDataFinished)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (_internal_has_mode()) {
    // required uint32 mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  if (_internal_has_context()) {
    // required uint32 context = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  if (_internal_has_id()) {
    // required uint32 id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t MessagePsiHashDataFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessagePsiHashDataFinished)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

    // required uint32 mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());

    // required uint32 context = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

    // required uint32 id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePsiHashDataFinished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessagePsiHashDataFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePsiHashDataFinished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagePsiHashDataFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessagePsiHashDataFinished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessagePsiHashDataFinished)
    MergeFrom(*source);
  }
}

void MessagePsiHashDataFinished::MergeFrom(const MessagePsiHashDataFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessagePsiHashDataFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessagePsiHashDataFinished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessagePsiHashDataFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePsiHashDataFinished::CopyFrom(const MessagePsiHashDataFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessagePsiHashDataFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePsiHashDataFinished::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MessagePsiHashDataFinished::InternalSwap(MessagePsiHashDataFinished* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(mode_, other->mode_);
  swap(context_, other->context_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePsiHashDataFinished::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagePsiResult::InitAsDefaultInstance() {
}
class MessagePsiResult::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagePsiResult>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MessagePsiResult::MessagePsiResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessagePsiResult)
}
MessagePsiResult::MessagePsiResult(const MessagePsiResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessagePsiResult)
}

void MessagePsiResult::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
}

MessagePsiResult::~MessagePsiResult() {
  // @@protoc_insertion_point(destructor:Messages.MessagePsiResult)
  SharedDtor();
}

void MessagePsiResult::SharedDtor() {
}

void MessagePsiResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePsiResult& MessagePsiResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagePsiResult_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessagePsiResult::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessagePsiResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&type_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessagePsiResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagePsiResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessagePsiResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // required uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context(), target);
  }

  // required uint32 id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  // required uint32 state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessagePsiResult)
  return target;
}

size_t MessagePsiResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessagePsiResult)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (_internal_has_context()) {
    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  if (_internal_has_id()) {
    // required uint32 id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_state()) {
    // required uint32 state = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());
  }

  return total_size;
}
size_t MessagePsiResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessagePsiResult)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

    // required uint32 id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 state = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePsiResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessagePsiResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePsiResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagePsiResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessagePsiResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessagePsiResult)
    MergeFrom(*source);
  }
}

void MessagePsiResult::MergeFrom(const MessagePsiResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessagePsiResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessagePsiResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessagePsiResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePsiResult::CopyFrom(const MessagePsiResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessagePsiResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePsiResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MessagePsiResult::InternalSwap(MessagePsiResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(context_, other->context_);
  swap(id_, other->id_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePsiResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagePsiIntersect::InitAsDefaultInstance() {
}
class MessagePsiIntersect::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagePsiIntersect>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MessagePsiIntersect::MessagePsiIntersect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessagePsiIntersect)
}
MessagePsiIntersect::MessagePsiIntersect(const MessagePsiIntersect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mac_(from.mac_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:Messages.MessagePsiIntersect)
}

void MessagePsiIntersect::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

MessagePsiIntersect::~MessagePsiIntersect() {
  // @@protoc_insertion_point(destructor:Messages.MessagePsiIntersect)
  SharedDtor();
}

void MessagePsiIntersect::SharedDtor() {
}

void MessagePsiIntersect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePsiIntersect& MessagePsiIntersect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagePsiIntersect_Messages_2eproto.base);
  return *internal_default_instance();
}


void MessagePsiIntersect::Clear() {
// @@protoc_insertion_point(message_clear_start:Messages.MessagePsiIntersect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_.Clear();
  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MessagePsiIntersect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_context(&has_bits);
          context_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mac = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mac(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_mac(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 data = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagePsiIntersect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessagePsiIntersect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // required uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // required uint32 context = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_context(), target);
  }

  // required uint32 id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  // repeated uint32 mac = 5 [packed = true];
  {
    int byte_size = _mac_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_mac(), byte_size, target);
    }
  }

  // repeated uint32 data = 6 [packed = true];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessagePsiIntersect)
  return target;
}

size_t MessagePsiIntersect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Messages.MessagePsiIntersect)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_size()) {
    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (_internal_has_context()) {
    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());
  }

  if (_internal_has_id()) {
    // required uint32 id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t MessagePsiIntersect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Messages.MessagePsiIntersect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());

    // required uint32 context = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_context());

    // required uint32 id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mac = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mac_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mac_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 data = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePsiIntersect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Messages.MessagePsiIntersect)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePsiIntersect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagePsiIntersect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Messages.MessagePsiIntersect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Messages.MessagePsiIntersect)
    MergeFrom(*source);
  }
}

void MessagePsiIntersect::MergeFrom(const MessagePsiIntersect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Messages.MessagePsiIntersect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mac_.MergeFrom(from.mac_);
  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      context_ = from.context_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessagePsiIntersect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Messages.MessagePsiIntersect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePsiIntersect::CopyFrom(const MessagePsiIntersect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Messages.MessagePsiIntersect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePsiIntersect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MessagePsiIntersect::InternalSwap(MessagePsiIntersect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mac_.InternalSwap(&other->mac_);
  data_.InternalSwap(&other->data_);
  swap(type_, other->type_);
  swap(size_, other->size_);
  swap(context_, other->context_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePsiIntersect::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Messages::JudgeContactRequest* Arena::CreateMaybeMessage< ::Messages::JudgeContactRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::JudgeContactRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::JudgeContactResponse* Arena::CreateMaybeMessage< ::Messages::JudgeContactResponse >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::JudgeContactResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::InitialMessage* Arena::CreateMaybeMessage< ::Messages::InitialMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::InitialMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessageMsg0* Arena::CreateMaybeMessage< ::Messages::MessageMsg0 >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessageMsg0 >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessageMSG1* Arena::CreateMaybeMessage< ::Messages::MessageMSG1 >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessageMSG1 >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessageMSG2* Arena::CreateMaybeMessage< ::Messages::MessageMSG2 >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessageMSG2 >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessageMSG3* Arena::CreateMaybeMessage< ::Messages::MessageMSG3 >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessageMSG3 >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::AttestationMessage* Arena::CreateMaybeMessage< ::Messages::AttestationMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::AttestationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessagePsiSalt* Arena::CreateMaybeMessage< ::Messages::MessagePsiSalt >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessagePsiSalt >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessagePsiHashData* Arena::CreateMaybeMessage< ::Messages::MessagePsiHashData >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessagePsiHashData >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessagePsiHashDataFinished* Arena::CreateMaybeMessage< ::Messages::MessagePsiHashDataFinished >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessagePsiHashDataFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessagePsiResult* Arena::CreateMaybeMessage< ::Messages::MessagePsiResult >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessagePsiResult >(arena);
}
template<> PROTOBUF_NOINLINE ::Messages::MessagePsiIntersect* Arena::CreateMaybeMessage< ::Messages::MessagePsiIntersect >(Arena* arena) {
  return Arena::CreateInternal< ::Messages::MessagePsiIntersect >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
